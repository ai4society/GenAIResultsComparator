name: Publish Python Package to PyPI

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+*" # Trigger on tags like v0.1.0, v1.2.3, v1.0.0-alpha, etc.

permissions:
  contents: write # Required to create GitHub Releases
  id-token: write # Required for OIDC trusted publishing to PyPI

jobs:
  publish:
    runs-on: ubuntu-latest
    # Optional: Add environment for PyPI trusted publisher configuration (see point 2)
    environment:
      name: pypi
      url: https://pypi.org/p/GAICo

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetches all history for all branches and tags, useful for changelog generation if needed

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11" # Choose a specific version your project supports and tests with

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Verify tag and pyproject.toml version match
        run: |
          # Extract version from tag (e.g., v0.1.5 -> 0.1.5)
          VERSION_FROM_TAG=${GITHUB_REF_NAME#v}
          echo "Version from tag: $VERSION_FROM_TAG"

          # Extract version from pyproject.toml
          # Ensure tomllib is available (Python 3.11+ built-in)
          # If using older Python in the workflow, you might need to pip install toml
          VERSION_FROM_PYPROJECT=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo "Version from pyproject.toml: $VERSION_FROM_PYPROJECT"

          if [ "$VERSION_FROM_TAG" != "$VERSION_FROM_PYPROJECT" ]; then
            echo "Error: Tag version ($VERSION_FROM_TAG) does not match pyproject.toml version ($VERSION_FROM_PYPROJECT)."
            exit 1
          fi
          echo "Version $VERSION_FROM_TAG verified."

      - name: Build package
        run: uv build # uv will use $HOME/.cargo/bin/uv if installed via curl script, or be on PATH if using setup-uv-action

      - name: Publish package to PyPI
        # This step assumes you have configured Trusted Publishing on PyPI for this repository and workflow.
        run: >-
          uv publish
          --attestations
          --no-prompt
          dist/*.whl
          dist/*.tar.gz
        # No --token needed when using OIDC / Trusted Publishing
        # uv automatically detects it's in a GHA environment configured for OIDC.

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ github.token }} # GITHUB_TOKEN is automatically available
          TAG_NAME: ${{ github.ref_name }}
        run: |
          echo "Creating GitHub Release for $TAG_NAME"
          # gh release create will use the tag message or commit messages for the release notes by default.
          # --generate-notes will attempt to create a summary based on merged PRs since the last release.
          # You can also point to a file with release notes: --notes-file CHANGELOG.md
          gh release create "$TAG_NAME" \
            --repo "$GITHUB_REPOSITORY" \
            --title "$TAG_NAME Release" \
            --generate-notes \
            dist/* # Attach the built wheel and sdist to the release
          echo "GitHub Release for $TAG_NAME created and artifacts uploaded."
